Rxjava+Retrofit
aidl
service笔记

 dragger2:    https://www.jianshu.com/p/22c397354997
 bitmap:      http://ms.csdn.net/geek/69041?from=timeline

 Android Studio 配置 toString( ) 模板，定制 JSON 格式字串的步骤
 http://blog.csdn.net/NongJushi/article/details/75500867

service:
http://blog.csdn.net/luoyanglizi/article/details/51586437

1.与其他组件联系方式：startService()、bindService()
    “其他组件”不包括Broadcast receiver，其无法直接启动或绑定service。
    功能：
    1.启动service的方式：s/b_在其他组件中，调用方法后，服务即处于启动状态。

    区别：
    1.停止service的方式
        s_service调用stopSelf()，或者其他组件调用stopService()后，service 停止运行。
        b_所有与service绑定的组件被销毁，或者他们都调用了unbindService()后，service 停止运行。
    2.service与启动它的组件之间的通信方式
        s_没有提供默认的通信方式，启动service后该service就处于独立运行状态.
        b_可以通过 ServiceConnection进行通信，组件可以与service进行交互、
            发送请求、获取结果，甚至是利用IPC跨进程执行这些操作
    3.service的生命周期
        s_一旦启动，service即可在后台无限期运行，即使启动service的组件已被销毁也不受其影响，
            直到其被停止
        b_当所有与其绑定的组件都取消绑定(可能是组件被销毁也有可能是其调用了unbindService()方法)后，
            service将停止

2.生命周期方法：
    1. int onStartCommand(Intent intent, int flags, int startId)
        service主要的操作，
        当其他组件通过startService()方法启动service时，此方法将会被调用。


    2. IBinder onBind(Intent intent)
        当其他组件通过bindService()方法与service相绑定之后，此方法将会被调用；
        重写它的时候必须返回一个IBinder对象，用来支撑其他组件与service之间的通信；
        如果你不想让这个service被其他组件所绑定，可以通过在这个方法返回一个null值来实现。

3.Manifests属性：
    <service
        android:enabled=["true" | "false"]
        android:exported=["true" | "false"]
        android:icon="drawable resource"
        android:isolatedProcess=["true" | "false"]
        android:label="string resource"
        android:name="string" //唯一必填
        android:permission="string"
        android:process="string" >
    </service>

    1.enabled:是否可以被系统实例化
    2.explorted:
        true_其他应用的组件可以调用此service,并可以互动。
        false_只有与service统一应用或相同userId的应用可以开启或绑定。
        默认值取决于service是否有intent filters,
            若没有，默认false,只有指定了service的准确类名才能调用，即只能应用内使用。
            若有，默认true,考虑了外界使用的情况。
    3.label:
        显示给用户的这个service的名字。如果不设置，将会默认使用<application>的label属性。
    4.isolatedProcess:
        默认为false，
        如果设置为true，这个service将运行在一个从系统中其他部分分离出来的特殊进程中，
        我们只能通过Service API来与它进行交流。
    5.process:
        service运行的进程的name。默认启动的service是运行在主进程中的。

4.使用场景：
        1.startService(),其他组件通过调用此方法即可启动特定的service，并导致onStartCommand()方法调用，
    通过intent传值，比如此时某个Activity要将一些数据存入数据库中，我就可以通过intent把数据传入service，
    然后让service去进行连接数据库，存储数据等操作，而此时用户可以执行其他的任何操作
    ——甚至包括销毁那个Activity——这并不会影响service存储数据这件事。
        当一个service通过这种方式启动之后，它的生命周期就已经不受启动它的组件影响了，它可以在后台无限期的
    运行下去，只要service自身没有调用stopSelf()并且其他的组件没有调用针对它的stopService()。
        默认service将工作于应用的主线程，而这将会降低所有正在运行的Activity的性能。如果确定了使用这种方式
    启动service并且不希望这个service被绑定的话，更好的做法是继承IntentService：
    1.创建默认的工作线程，用于在应用的主线程外执行传递给 onStartCommand() 的所有 Intent
    2.创建工作队列，用于将一个 Intent 逐一传递给 onHandleIntent() 实现，这样的话就永远不必担心多线程问题了
    3.在处理完所有启动请求后停止服务，从此妈妈再也不用担心我忘记调用 stopSelf() 了
    4.提供 onBind() 的默认实现（返回 null）
    5.提供 onStartCommand() 的默认实现，可将 Intent 依次发送到工作队列和 onHandleIntent() 实现

    在super()中对工作线程、工作队列初始化以及销毁等操作。如果让service同时处理多个请求，只能继承service.

        2.bindService(),可以完成比startService()更多的事情，比如其他组件可向其发送请求，接受来自它的响应，
    甚至通过它来进行IPC等等。我们通常将绑定它的组件成为客户端，而称它为服务器。
        如果要创建一个支持绑定的service，我们必须要重写它的onBind()方法。这个方法会返回一个IBinder对象，
    它是客户端用来和服务器进行交互的接口。而要得到IBinder接口，我们通常有三种方式：
        1.继承Binder类，
        2.使用Messenger类，
        3.使用AIDL。

        客户端与服务端的绑定：
        客户端bindService()及相关配置,服务端实现onBind()重写，返回一个用做信息交互的IBinder接口。
         @Override
         public boolean bindService(Intent service, ServiceConnection conn,int flags) {
            return mBase.bindService(service, conn, flags);
         }
        客户端配置：见MainActivity,实现ServiceConnection通过得到目标service的对象，调用其中的共有方法，
        实现客户端与服务端交互。
        flags:指示绑定选项的标志，如BIND_AUTO_CREATE创建尚未激活的服务，BIND_DEBUG_UNBIND，0等

        服务端配置：见ServiceDemo，重写onbind(),返回Ibinder对象
        获得IBinder的对象的三种方式：继承Binder类，使用Messenger类，使用AIDL。
            使用AIDL步骤:
            服务端创建一个AIDL文件，将暴露给客户端的接口在里面声明
            在service中实现这些接口
            客户端绑定服务端，并将onServiceConnected()得到的IBinder转为AIDL生成的IInterface实例
            通过得到的实例调用其暴露的方法
            AIDL使用场景：
            一方面是如果项目中有并发处理问题的需求，或者会有大量的并发请求，这个时候
            Messenger就不适用了——它的特性让它只能串行的解决请求。另外，我们在使用Messenger的时候
            只能通过Message来传递信息实现交互，但是在有些时候也许我们需要直接跨进程调用服务端的方法，
            这个时候又怎么办呢？只能使用AIDL。

5.区别：
    1.startService：启动之后不显式停止它就永远在后台运行，并且不需要客户端与服务端交互的service。
    比方说一条专门拿来存数据到本地数据库的service，它就一直在后台等着有别的组件startService，然后把
    拿到的数据存入数据库，这就显然是用startService做的事情。
    生命周期：onCreate(),onStartCommand(),onDestroy()
    2.bindService：可以交互的，可以掌控它什么时候停什么时候开始的，有进程间通信(IPC)的
    生命周期：onCreate(),onBind(),onUnbind(),onDestroy()

AIDL——IPC:
    1.文件后缀.aidl
    2.AIDL默认支持的数据类型不需要导包，其他类(.java)即使与.aidl同一个包名也需要导包。
        默认支持的数据类型包括：
            Java中的八种基本数据类型，包括 byte，short，int，long，float，double，boolean，char。
            String 类型。
            CharSequence类型。
            List类型：List中的所有元素必须是AIDL支持的类型之一，或者是一个其他AIDL生成的接口，或者是
                定义的parcelable（下文关于这个会有详解）。List可以使用泛型。
            Map类型：Map中的所有元素必须是AIDL支持的类型之一，或者是一个其他AIDL生成的接口，或者是
                定义的parcelable。Map是不支持泛型的。

    3.定向tag：表示了在跨进程通信中数据的流向，针对客户端中传入方法的对象，
        1.只能由客户端流向服务端in,服务端将会接收到一个那个对象的完整数据，但是客户端的那个对象不会因为
            服务端对传参的修改而发生变动；
        2.只能由服务端流向客户端out,服务端将会接收到那个对象的的空对象，但是在服务端对接收到的空对象
            有任何修改之后客户端将会同步变动；
        3.双向流通inout,服务端将会接收到客户端传来对象的完整信息，并且客户端将会同步服务端对该对象的任何变动

    4.两种文件：
        1.定义parcelable对象，以供其他AIDL文件使用AIDL中非默认支持的数据类型
            --Bill.aidl
            --parcelable Bill;
            进行通信的所有非默认支持的数据类型都要单独编写aidl文件。
        2.定义方法接口，以供系统使用来完成跨进程通信
            --DataManager.aidl
            --interface DataManager {
                  //所有的返回值前都不需要加任何东西，不管是什么数据类型，传参时除了Java基本类型以及String，
                  //CharSequence之外的类型，都需要在前面加上定向tag，具体加什么量需而定
                  Data getData();
                  boolean setData(in Data isData);
                  Bill getBill();
                  boolean setBill(in Bill isBill);
                  String tranferKey(String data,String time);
                  void basicTypes(int anInt, long aLong, boolean aBoolean, float aFloat,
                          double aDouble, String aString);
              }
        3.文件的序列化：
             因为工具生成的parcelable只有writeToParcelable()方法，只支持为in的定向tag，如果要支持
             out,inout的定向tag，需要实现readFromParcel(),
                //dest用来存储与传输数据，且顺序要与writeToParcel()方法中一致
                    public void readFromParcel(Parcel dest){
                        responseCode = dest.readString();
                        errorMessage=dest.readString();
                        logo=dest.readString();
                        mechantName=dest.readString();
                        mechantId = dest.readString();
                        totalPage=dest.readInt();
                        dest.readTypedList(result,ResultBean.CREATOR);
                    }
        4.跨进程通信：
            写完aidl，clean或rebuild之后，编译器生成一个与aidl同名的.java文件，在服务端实现aidl定义的
            方法接口的具体逻辑，然后客户端调用这些方法接口，实现跨进程通信。
01-03 14:48:32.867 10345-10345/com.hhz.aidl W/hzhao:   AIDLService.onBind (AIDLService.java:88)--->>>服务端_建立连接的规则_filter：Intent { act=com.hhz.aidlLink pkg=com.hhz.aidl }
01-03 14:48:32.941 10345-10345/com.hhz.aidl W/hzhao:   MainActivity.onServiceConnected (MainActivity.java:142)--->>>服务连接
01-03 14:48:32.941 10345-10345/com.hhz.aidl W/hzhao:   AIDLService.getResults (AIDLService.java:41)--->>>服务端_getResults=[{"usedLimit":0,"usedCount":0,"serialNo":"null","recordType":0,"recordDate":"这是服务端原始数据","recordCount":0,"orderAmount":0.0,"discount":"0.12","describeContents":0,"couponType":1,"couponNo":"null","couponAmount":10,"consumeLite":100}]
01-03 14:48:32.942 10345-10345/com.hhz.aidl W/hzhao:   MainActivity.onServiceConnected (MainActivity.java:159)--->>>客户端_连接中，读取的服务端数据：[{"usedLimit":0,"usedCount":0,"serialNo":"null","recordType":0,"recordDate":"这是服务端原始数据","recordCount":0,"orderAmount":0.0,"discount":"0.12","describeContents":0,"couponType":1,"couponNo":"null","couponAmount":10,"consumeLite":100}]
01-03 14:48:37.597 10345-10345/com.hhz.aidl W/hzhao:   AIDLService.addResult (AIDLService.java:65)--->>>服务端_客户端传过来的值：[{"usedLimit":0,"usedCount":0,"serialNo":"null","recordType":0,"recordDate":"这是服务端原始数据","recordCount":0,"orderAmount":0.0,"discount":"0.12","describeContents":0,"couponType":1,"couponNo":"null","couponAmount":10,"consumeLite":100}, {"usedLimit":0,"usedCount":0,"serialNo":"null","recordType":0,"recordDate":"这是客户端数据","recordCount":0,"orderAmount":500.0,"discount":"3.0","describeContents":0,"couponType":2,"couponNo":"null","couponAmount":200,"consumeLite":0}]
01-03 14:48:37.600 10345-10345/com.hhz.aidl W/hzhao:   AIDLService.addResult (AIDLService.java:75)--->>>服务端_服务端修改后的值：[{"usedLimit":0,"usedCount":0,"serialNo":"null","recordType":0,"recordDate":"这是服务端修改后的值","recordCount":0,"orderAmount":1000000.0,"discount":"3.12","describeContents":0,"couponType":2,"couponNo":"null","couponAmount":1000,"consumeLite":0}]
01-03 14:48:37.604 10345-10345/com.hhz.aidl W/hzhao:   MainActivity.addResults (MainActivity.java:123)--->>>客户端_读服务端修改后的结果={"usedLimit":0,"usedCount":0,"serialNo":"null","recordType":0,"recordDate":"这是服务端修改后的值","recordCount":0,"orderAmount":1000000.0,"discount":"3.12","describeContents":0,"couponType":2,"couponNo":"null","couponAmount":1000,"consumeLite":0}




